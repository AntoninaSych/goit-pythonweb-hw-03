from jinja2 import Environment, FileSystemLoader
import os
from http.server import HTTPServer, BaseHTTPRequestHandler
from threading import Thread
import json
from datetime import datetime
from urllib.parse import parse_qs

# –ö–æ–Ω—Ñ—ñ–≥—É—Ä–∞—Ü—ñ—è
HOST = '0.0.0.0'
PORT = 3000
DATA_FILE = 'storage/data.json'

# –Ü–Ω—ñ—Ü—ñ–∞–ª—ñ–∑–∞—Ü—ñ—è Jinja2
BASE_DIR = os.path.dirname(__file__)
TEMPLATES_PATH = os.path.join(BASE_DIR, 'templates')
STATIC_PATH = os.path.join(BASE_DIR, 'static')

env = Environment(loader=FileSystemLoader(TEMPLATES_PATH))


# –ü–µ—Ä–µ–≤—ñ—Ä–∫–∞ —ñ—Å–Ω—É–≤–∞–Ω–Ω—è –Ω–µ–æ–±—Ö—ñ–¥–Ω–∏—Ö —Ñ–∞–π–ª—ñ–≤ —ñ –ø–∞–ø–æ–∫
if not os.path.exists('storage'):
    os.makedirs('storage')
if not os.path.exists(DATA_FILE):
    with open(DATA_FILE, 'w') as f:
        json.dump({}, f)


class CustomHTTPRequestHandler(BaseHTTPRequestHandler):
    """
    –ö–ª–∞—Å –¥–ª—è –æ–±—Ä–æ–±–∫–∏ HTTP-–∑–∞–ø–∏—Ç—ñ–≤.
    """

    def do_GET(self):
        routes = {
            '/': 'index.html.jinja2',
            '/message.html': 'message.html.jinja2',
            '/read': 'read.html.jinja2',
        }

        if self.path in routes:
            template = env.get_template(routes[self.path])
            if self.path == '/read':
                with open(DATA_FILE, 'r') as f:
                    messages = json.load(f)
                # –°–æ—Ä—Ç—É—î–º–æ –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è –∑–∞ —á–∞—Å–æ–º —É –∑–≤–æ—Ä–æ—Ç–Ω–æ–º—É –ø–æ—Ä—è–¥–∫—É
                sorted_messages = dict(sorted(messages.items(), key=lambda x: x[0], reverse=True))
                content = template.render(messages=sorted_messages)
            else:
                content = template.render()
            self._send_response(200, content)
        elif self.path.startswith('/static/'):
            self._serve_static()
        else:
            template = env.get_template('error.html.jinja2')
            content = template.render()
            self._send_response(404, content)

    def do_POST(self):
        if self.path == '/message':
            content_length = int(self.headers['Content-Length'])
            post_data = self.rfile.read(content_length)
            data = parse_qs(post_data.decode('utf-8'))

            username = data.get('username', [''])[0]
            message = data.get('message', [''])[0]

            if username and message:
                with open(DATA_FILE, 'r+') as f:
                    stored_data = json.load(f)
                    timestamp = datetime.now().isoformat()
                    stored_data[timestamp] = {"username": username, "message": message}
                    f.seek(0)
                    json.dump(stored_data, f, indent=4)

                self._redirect('/')
            else:
                self._send_response(400, 'Bad Request: Missing username or message')
        else:
            self._send_response(404, 'Not Found')

    def _send_response(self, status, content):
        """
        –í—ñ–¥–ø—Ä–∞–≤–∫–∞ HTML-–≤—ñ–¥–ø–æ–≤—ñ–¥—ñ –∫–ª—ñ—î–Ω—Ç—É.
        """
        self.send_response(status)
        self.send_header('Content-type', 'text/html')
        self.end_headers()
        self.wfile.write(content.encode('utf-8'))

    def _serve_static(self):
        """
        –û–±—Ä–æ–±–∫–∞ —Å—Ç–∞—Ç–∏—á–Ω–∏—Ö —Ñ–∞–π–ª—ñ–≤.
        """
        file_path = os.path.join(STATIC_PATH, os.path.basename(self.path))
        if os.path.exists(file_path):
            self.send_response(200)
            if file_path.endswith('.css'):
                self.send_header('Content-type', 'text/css')
            elif file_path.endswith('.png'):
                self.send_header('Content-type', 'image/png')
            self.end_headers()
            with open(file_path, 'rb') as f:
                self.wfile.write(f.read())
        else:
            self._send_response(404, 'Static File Not Found')

    def _redirect(self, location):
        """
        –ü–µ—Ä–µ–Ω–∞–ø—Ä–∞–≤–ª–µ–Ω–Ω—è –∫–ª—ñ—î–Ω—Ç–∞ –Ω–∞ —ñ–Ω—à—É —Å—Ç–æ—Ä—ñ–Ω–∫—É.
        """
        self.send_response(303)
        self.send_header('Location', location)
        self.end_headers()


# –ó–∞–ø—É—Å–∫ —Å–µ—Ä–≤–µ—Ä–∞ —É –±–∞–≥–∞—Ç–æ–ø–æ—Ç–æ—á–Ω–æ–º—É —Ä–µ–∂–∏–º—ñ
if __name__ == '__main__':
    try:
        httpd = HTTPServer((HOST, PORT), CustomHTTPRequestHandler)
        server = Thread(target=httpd.serve_forever)
        server.start()
        print(f"üöÄ Server is running on http://{HOST}:{PORT}")
    except KeyboardInterrupt:
        print("\nüõë Server is stopping...")
        httpd.shutdown()
        server.join()
        print("‚úÖ Server has been stopped.")
